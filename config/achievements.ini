var AchievementBonusFoodCollect = [0,0],
    AchievementSuperFoodCollect = [0,0],
    AchievementBonusFoodFading,
    AchievementsList = [
      {
        count : false,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          return AchievementBonusFoodFading;
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2,l[18]);
          FullscreenGlow(currInterval * 12,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(AchievementBonusFoodFading) {
            if(count < 4) {
              changeCountValue(count + 1);
              return false;
            } else return true;
          } else return false;
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[19]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 4) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*3,l[15]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 3) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.7,l[14]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 2) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[13]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 1) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2,l[12]);
          FullscreenGlow(currInterval * 12,gridColors[5],5);
        }
      },  {
        count : false,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood, "missBonusFood", "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == bonusFood || keyWord == superFood) {
            if(AchievementBonusFoodCollect[0] == 4) return true;
            else {
              AchievementBonusFoodCollect[0]++;
              return false;
            }
          } else if(keyWord == "missBonusFood" || keyWord == "missSuperFood") {
            if(AchievementBonusFoodCollect[0] > 0) AchievementBonusFoodCollect[0] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          if(AchievementSuperFoodCollect[0] != 4) {
            centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2,l[9]);
            FullscreenGlow(currInterval * 12,gridColors[5],5);
          }
        }
      }, {
        count : false,
        repeat : false,
        allowedKeyWords : [superFood, "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == superFood) {
            if(AchievementSuperFoodCollect[0] == 4) return true;
            else {
              AchievementSuperFoodCollect[0]++;
              return false;
            }
          } else if(keyWord == "missSuperFood") {
            if(AchievementSuperFoodCollect[0] > 0) AchievementSuperFoodCollect[0] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[10]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      },  {
        count : false,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood, "missBonusFood", "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == bonusFood || keyWord == superFood) {
            if(AchievementBonusFoodCollect[1] == 9) return true;
            else {
              AchievementBonusFoodCollect[1]++;
              return false;
            }
          } else if(keyWord == "missBonusFood" || keyWord == "missSuperFood") {
            if(AchievementBonusFoodCollect[1] > 0) AchievementBonusFoodCollect[1] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          if(AchievementSuperFoodCollect[1] != 9) {
            centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[16]);
            FullscreenGlow(currInterval * 12,gridColors[5],5);
          }
        }
      }, {
        count : false,
        repeat : false,
        allowedKeyWords : [superFood, "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == superFood) {
            if(AchievementSuperFoodCollect[1] == 9) return true;
            else {
              AchievementSuperFoodCollect[1]++;
              return false;
            }
          } else if(keyWord == "missSuperFood") {
            if(AchievementSuperFoodCollect[1] > 0) AchievementSuperFoodCollect[1] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*3,l[17]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 500 && keyWord < maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.8);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[0][0],textColors[0][1],textColors[0][2],textColors[0][3],length/2,length*2,multi[0]);
          FullscreenGlow(currInterval * 12,gridColors[1],1);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 1000 && keyWord < maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.8);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[0][0],textColors[0][1],textColors[0][2],textColors[0][3],length/2,length*2,multi[1]);
          FullscreenGlow(currInterval * 12,gridColors[1],1);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 2000 && keyWord < maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.8);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[0][0],textColors[0][1],textColors[0][2],textColors[0][3],length/2,length*2,multi[2]);
          FullscreenGlow(currInterval * 12,gridColors[1],1);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 5000 && keyWord < maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.8);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[0][0],textColors[0][1],textColors[0][2],textColors[0][3],length/2,length*2,multi[3]);
          FullscreenGlow(currInterval * 12,gridColors[1],1);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return keyWord >= 9000;
        },
        callback : function(keyWord) {
          if(keyWord < 0.8 * maxScore[1]) {
            centerGrowDraw(500,3000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[4]);
            FullscreenGlow(currInterval * 14,gridColors[2],2);
          } else if(keyWord >= 0.8 * maxScore[1] && keyWord < maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.8) {
            centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[4]);
            FullscreenGlow(currInterval * 18,gridColors[4],4);
          } else {
            centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[4]);
            FullscreenGlow(currInterval * 20,gridColors[6],6);
          }
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 15000 && keyWord < 0.1 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,3000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[5]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 20000 && keyWord < 0.1 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,3000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[6]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 25000 && keyWord < 0.1 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,3000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[7]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 30000 && keyWord < 0.1 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,3000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[8]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord >= 50000 && keyWord < 0.1 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,3000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[9]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.1 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,2000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[10]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.2 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,2000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[11]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.3 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,2000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[12]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.4 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,2000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[13]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.5 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,2000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[14]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.6 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,2000,textColors[1][0],textColors[1][1],textColors[1][2],textColors[1][3],length/2,length*2,multi[15]);
          FullscreenGlow(currInterval * 14,gridColors[2],2);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.7 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[16]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.8 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[17]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.9 * maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[18]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[0] && keyWord < 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[19]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.1 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[20]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.2 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[21]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.3 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[22]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.4 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[23]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.5 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[24]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.6 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[25]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.7 * maxScore[1]);
        },
        callback : function(keyWord) {
          if(keyWord > 9000) {centerGrowDraw(500,3000,textColors[2][0],textColors[2][1],textColors[2][2],textColors[2][3],length/2,length*2.5,multi[26]);
          FullscreenGlow(currInterval * 16,gridColors[3],3);}
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.8 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[27]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > 0.9 * maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[28]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[29]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.1);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[30]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.2);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[31]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.3);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[32]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.4);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[33]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.5);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[34]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.6);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[35]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.7);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[3][0],textColors[3][1],textColors[3][2],textColors[3][3],length/2,length*2.7,multi[36]);
          FullscreenGlow(currInterval * 18,gridColors[4],4);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.8);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[37]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[1] + Math.abs(maxScore[1] - maxScore[2]) * 0.9);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[38]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2]);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[39]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.1);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[40]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.2);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[41]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.3);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[42]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.4);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[43]);
          FullscreenGlow(currInterval * 20,gridColors[6],6); 
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.5);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[44]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.6);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[45]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.7);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[46]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.8);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[5][0],textColors[5][1],textColors[5][2],textColors[5][3],length/2,length*3,multi[47]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }, {
        count : false,
        repeat : false, allowedKeyWords : false, allowedKeyWordTypes : "number",
        condition : function(keyWord) {
          return (keyWord > maxScore[2] + Math.abs(maxScore[2] - maxScore[3]) * 0.9);
        },
        callback : function(keyWord) {
          centerGrowDraw(500,5000,textColors[6][0],textColors[6][1],textColors[6][2],textColors[6][3],length/2,length*3,multi[48]);
          FullscreenGlow(currInterval * 20,gridColors[6],6);
        }
      }
    ],
    AchievementsListener = new Achievements();
AchievementsListener.attach(AchievementsList);