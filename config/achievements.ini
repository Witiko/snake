var AchievementBonusFoodCollect = [0,0],
    AchievementSuperFoodCollect = [0,0],
    AchievementBonusFoodFading,
    DynamicAchievementsList = [],
    StaticAchievementsList = [
      {
        count : false,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          return AchievementBonusFoodFading;
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2,l[18]);
          FullscreenGlow(currInterval * 12,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(AchievementBonusFoodFading) {
            if(count < 4) {
              changeCountValue(count + 1);
              return false;
            } else return true;
          } else return false;
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[19]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 4) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*3,l[15]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 3) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.7,l[14]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 2) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[13]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }, {
        count : true,
        repeat : false,
        allowedKeyWords : [food, bonusFood, superFood, "changeDirection"],
        allowedKeyWordTypes : false,
        condition : function(keyWord, count, changeCountValue) {
          if(keyWord == food || keyWord == bonusFood || keyWord == superFood) {
            if(count == 1) return true;
            else {
              changeCountValue(count + 1);
              return false;
            }
          } else if(keyWord == "changeDirection") {
            changeCountValue(0);
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord, count, changeCountValue) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2,l[12]);
          FullscreenGlow(currInterval * 12,gridColors[5],5);
        }
      },  {
        count : false,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood, "missBonusFood", "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == bonusFood || keyWord == superFood) {
            if(AchievementBonusFoodCollect[0] == 4) return true;
            else {
              AchievementBonusFoodCollect[0]++;
              return false;
            }
          } else if(keyWord == "missBonusFood" || keyWord == "missSuperFood") {
            if(AchievementBonusFoodCollect[0] > 0) AchievementBonusFoodCollect[0] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          if(AchievementSuperFoodCollect[0] != 4) {
            centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2,l[9]);
            FullscreenGlow(currInterval * 12,gridColors[5],5);
          }
        }
      }, {
        count : false,
        repeat : false,
        allowedKeyWords : [superFood, "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == superFood) {
            if(AchievementSuperFoodCollect[0] == 4) return true;
            else {
              AchievementSuperFoodCollect[0]++;
              return false;
            }
          } else if(keyWord == "missSuperFood") {
            if(AchievementSuperFoodCollect[0] > 0) AchievementSuperFoodCollect[0] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[10]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      },  {
        count : false,
        repeat : false,
        allowedKeyWords : [bonusFood, superFood, "missBonusFood", "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == bonusFood || keyWord == superFood) {
            if(AchievementBonusFoodCollect[1] == 9) return true;
            else {
              AchievementBonusFoodCollect[1]++;
              return false;
            }
          } else if(keyWord == "missBonusFood" || keyWord == "missSuperFood") {
            if(AchievementBonusFoodCollect[1] > 0) AchievementBonusFoodCollect[1] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          if(AchievementSuperFoodCollect[1] != 9) {
            centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*2.5,l[16]);
            FullscreenGlow(currInterval * 12,gridColors[5],5);
          }
        }
      }, {
        count : false,
        repeat : false,
        allowedKeyWords : [superFood, "missSuperFood"],
        allowedKeyWordTypes : false,
        condition : function(keyWord) {
          if(keyWord == superFood) {
            if(AchievementSuperFoodCollect[1] == 9) return true;
            else {
              AchievementSuperFoodCollect[1]++;
              return false;
            }
          } else if(keyWord == "missSuperFood") {
            if(AchievementSuperFoodCollect[1] > 0) AchievementSuperFoodCollect[1] = 0;
            return false;
          } else {
            return false;
          }
        },
        callback : function(keyWord) {
          centerGrowDraw(500,2000,textColors[4][0],textColors[4][1],textColors[4][2],textColors[4][3],length/2,length*3,l[17]);
          FullscreenGlow(currInterval * 15,gridColors[5],5);
        }
      }
    ],
    ScoreAchievements = [
      {
        text: multi[4], // 9000
        colors: "adopt",
        sizeMultiplier: "adopt",
        delay: "adopt",
        treshold: {
          type: "score",
          amount: 9000
        }
      },{
        text: multi[0], // 500
        colors: 0,
        sizeMultiplier: 2,
        delay: 2000,
        treshold: {
          type: "eaten",
          amount: 22
        }
      },{
        text: multi[1], // 1000
        colors: 0,
        sizeMultiplier: 2,
        delay: 2000,
        treshold: {
          type: "eaten",
          amount: 32
        }
      },{
        text: multi[2], // 2000
        colors: 0,
        sizeMultiplier: 2,
        delay: 2000,
        treshold: {
          type: "eaten",
          amount: 46
        }
      },{
        text: multi[3], // 5000
        colors: 0,
        sizeMultiplier: 2,
        delay: 2000,
        treshold: {
          type: "eaten",
          amount: 74
        }
      },{
        text: multi[5], // 10000
        colors: 1,
        sizeMultiplier: 2,
        delay: 2500,
        treshold: {
          type: "eaten",
          amount: 107
        }
      },{
        text: multi[6], // 15000
        colors: 1,
        sizeMultiplier: 2,
        delay: 2500,
        treshold: {
          type: "eaten",
          amount: 131
        }
      },{
        text: multi[7], // 20000
        colors: 1,
        sizeMultiplier: 2,
        delay: 2500,
        treshold: {
          type: "eaten",
          amount: 152
        }
      },{
        text: multi[8], // 25000
        colors: 1,
        sizeMultiplier: 2,
        delay: 2500,
        treshold: {
          type: "eaten",
          amount: 170
        }
      },{
        text: multi[9], // 50000
        colors: 1,
        sizeMultiplier: 2,
        delay: 2500,
        treshold: {
          type: "eaten",
          amount: 200
        }
      },{
        text: [multi, 10, 15],
        colors: 1,
        sizeMultiplier: 2,
        delay: 2500
      },{
        text: [multi, 16, 26],
        colors: 2,
        sizeMultiplier: 2.5,
        delay: 3000
      },{
        text: [multi, 27, 36],
        colors: 3,
        sizeMultiplier: 2.7,
        delay: 5000
      },{
        text: [multi, 37, 46],
        colors: 5,
        sizeMultiplier: 3,
        delay: 5000
      },{
        text: multi[47],
        colors: 6,
        sizeMultiplier: 3.2,
        delay: 6000
      }
    ];
    AchievementsListener = new Achievements();